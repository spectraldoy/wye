use super::ast;
use crate::types;
use crate::types::structure::{Structure, Flex};
use super::util;
use super::span::{Spanned, Span};
use ordered_float::OrderedFloat;
use lalrpop_util::ParseError;
use std::collections::BTreeMap;

grammar;

extern {
    type Error = (&'static str, Span);
}

// ****************************************
// Comments and whitespace
// ****************************************
match {
    // Ignore whitespace
    r"\s+" => { },
    // Skip `%` comments
    r"%[^\n\r]*[\n\r]*" => { },
    // Skip `[% ... %]` comments
    r#"\[%[^%]*%+(?:[^\]*][^%]*\%+)%\]"# => { },
} else {
    _
}

// ****************************************
// Token rules
// ****************************************

/// Identifier: sequence of ASCII alphanumerics, or underscore.
Identifier: String = <r"[a-zA-Z_][a-zA-Z0-9_]*"> => String::from(<>);

/// Potentially bounded polymorphic type variable
PolytypeVar: ast::PolytypeVar= {
    <start: @L> <s: r"'[a-zA-Z_][a-zA-Z0-9_]*"> <end: @R> => 
        ast::PolytypeVar {
            name: s[1..].to_string(),
            bound: None,
            span: Some(Span {start, end})
        },
    <start: @L>  <s: r"[a-zA-Z_][a-zA-Z0-9_]*'[a-zA-Z_][a-zA-Z0-9_]*">  <end: @R> => {
        let bound_and_name = s.split("'").map(str::to_string).collect::<Vec<String>>();
        ast::PolytypeVar {
            name: bound_and_name[1].clone(),
            bound: Some(bound_and_name[0].clone()),
            span: Some(Span {start, end})
        }
    }
}

/// Integer literal
IntLiteral: i64 = <r"-?([0-9]|[1-9][0-9]*)"> => <>.parse::<i64>().unwrap();

/// String literal, eliminating surrounding quotes. May contain unicode.
StringLiteral: String = <s: r#""[^\"]*""#> => s[1..s.len() - 1].to_string();

/// Float literal, stored as ordered float for comparability.
FloatLiteral: OrderedFloat<f64> =
    <r"-?([0-9]|[1-9][0-9]*)\.[0-9]+([eE]-?[0-9]+)?"> => 
        OrderedFloat(<>.parse::<f64>().unwrap());

/// Builtin binary operators.
BinaryOp: ast::BinaryOp = {
    // Integer operators
    "+"  => ast::BinaryOp::Add,
    "-"  => ast::BinaryOp::Sub,
    "*"  => ast::BinaryOp::Mult,
    "/" => ast::BinaryOp::FloorDiv,
    // Float operators
    "+."  => ast::BinaryOp::FlAdd,
    "-."  => ast::BinaryOp::FlSub,
    "*."  => ast::BinaryOp::FlMult,
    "/."  => ast::BinaryOp::Div,
    // Comparators
    "<"  => ast::BinaryOp::Lt,
    ">"  => ast::BinaryOp::Gt,
    "<=" => ast::BinaryOp::Leq,
    ">=" => ast::BinaryOp::Geq,
    "==" => ast::BinaryOp::Eq,
    "!=" => ast::BinaryOp::Neq,
    // List construction
    "::" => ast::BinaryOp::Cons,
}

/// Builtin binary operator for postfix notation.
PostfixBinaryOp: ast::BinaryOp =
    "(" <bop: BinaryOp> ")" => bop;

// TODO(WYE-2): parse record method declarations
// Also allow definition of methods with type annotations

// ****************************************
// Expression building
// ****************************************

SpRecordExprField: Spanned<(String, ast::Expression)> =
    Sp<RecordField<Expression>>;

ProjectedExpr: ast::Expression = {
    <id: Sp<Identifier>> => ast::Expression::Identifier(id.value, Some(id.span)),
    <p: Sp<ProjectedExpr>> "." <id: Sp<Identifier>> =>
        ast::Expression::Projection(Box::new(p.value), id.value, Some(Span::new(p.span.start, id.span.end)))
}

AtomicExpr: ast::Expression = {
    <n: Sp<"nothing">> => ast::Expression::Nothing(Some(n.span)),
    <i: Sp<IntLiteral>> => ast::Expression::IntLiteral(i.value, Some(i.span)),
    <f: Sp<FloatLiteral>> => ast::Expression::FloatLiteral(f.value, Some(f.span)),
    <s: Sp<StringLiteral>> => ast::Expression::StringLiteral(s.value, Some(s.span)),
    <bop: Sp<PostfixBinaryOp>> => ast::Expression::BinaryOp(bop.value, Some(bop.span)),
    <p: Sp<"print">> => ast::Expression::Print(Some(p.span)),
    <f: Sp<"fail">> => ast::Expression::Fail(Some(f.span)),
    <lst: Sp<r"\[\s*\]">> => ast::Expression::List(vec![], Some(lst.span)),
    <lst: Sp<NonemptyList<Expression>>> => ast::Expression::List(lst.value, Some(lst.span)),
    <t: Sp<WyeTuple<Expression>>> => ast::Expression::Tuple(t.value, Some(t.span)),
    <r: Sp<WyeRecord<SpRecordExprField>>> =>? {
        let record_span = Some(r.span);
        // spanned_string_expr: Spanned<(String, Expression)>
        let num_entries = r.value.len();
        let record_elems = r.value.into_iter().map(|spanned_string_expr|
            (spanned_string_expr.value.0.clone(), (spanned_string_expr.value.1.clone(), Some(spanned_string_expr.span.clone())))
        ).collect::<BTreeMap<String, _>>();
        if record_elems.len() != num_entries {
            return Err(ParseError::User {
                error: ("Duplicate field in struct record expression", record_span.unwrap())
            });
        }
        Ok(ast::Expression::Record(record_elems, Flex::Permissive, record_span))
    },
    <r: Sp<NomRecord<SpRecordExprField>>> =>? {
        let record_span = Some(r.span);
        // spanned_string_expr: Spanned<(String, Expression)>
        let num_entries = r.value.len();
        let record_elems = r.value.into_iter().map(|spanned_string_expr|
            (spanned_string_expr.value.0.clone(), (spanned_string_expr.value.1.clone(), Some(spanned_string_expr.span.clone())))
        ).collect::<BTreeMap<String, _>>();
        if record_elems.len() != num_entries {
            return Err(ParseError::User {
                error: ("Duplicate field in nominal record expression", record_span.unwrap())
            });
        }
        Ok(ast::Expression::Record(record_elems, Flex::Exact, record_span))
    },
    ProjectedExpr,
    "(" <e: Expression> ")" => e,
}

SpNamedFuncArg: (String, ast::Expression, Span) =
    <start:@L> <id: Identifier> "=" <e: AtomicExpr> <end:@R> => (id, e, Span { start, end });

InfixExpr: ast::Expression = {
    #[precedence(level="0")]
    AtomicExpr,

    #[precedence(level="1")] #[assoc(side="left")]
    <start: @L> <op1: InfixExpr> <s: Sp<"*">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Mult, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
    <start: @L> <op1: InfixExpr> <s: Sp<"*.">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::FlMult, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
    <start: @L> <op1: InfixExpr> <s: Sp<"/">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::FloorDiv, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
    <start: @L> <op1: InfixExpr> <s: Sp<"/.">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Div, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),

    #[precedence(level="2")] #[assoc(side="left")]
    <start: @L> <op1: InfixExpr> <s: Sp<"+">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Add, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
    <start: @L> <op1: InfixExpr> <s: Sp<"-">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Sub, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
    <start: @L> <op1: InfixExpr> <s: Sp<"+.">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::FlAdd, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
    <start: @L> <op1: InfixExpr> <s: Sp<"-.">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::FlSub, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),

    #[precedence(level="3")] #[assoc(side="left")]
    <start: @L> <op1: InfixExpr> <s: Sp<"==">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Eq, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
    <start: @L> <op1: InfixExpr> <s: Sp<"!=">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Neq, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),

    #[precedence(level="4")] #[assoc(side="left")]
    <start: @L> <op1: InfixExpr> <s: Sp<"<">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Lt, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
    <start: @L> <op1: InfixExpr> <s: Sp<">" /*"*/>> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Gt, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
    <start: @L> <op1: InfixExpr> <s: Sp<"<=">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Leq, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
    <start: @L> <op1: InfixExpr> <s: Sp<">=" /*"*/>> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Geq, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),


    #[precedence(level="4")] #[assoc(side="left")]
    <start: @L> <op1: InfixExpr> <s: Sp<"::">> <op2: InfixExpr> <end: @R> => ast::Expression::FuncApplication(
        Box::new(ast::Expression::BinaryOp(ast::BinaryOp::Cons, Some(s.span))),
        vec![op1, op2],
        Some(Span { start, end }),
    ),
}

// / * //
// + -

NonLetExpr: ast::Expression = {
    InfixExpr,
    // Enum variant with field
    <evar: Sp<ProjectedExpr>> <with: Sp<"with">> <field: Sp<NonLetExpr>> =>? {
        if evar.span.end == with.span.start {
            return Err(ParseError::User {
                error: ("Space required between enum variant and `with` token", Span::new(evar.span.start, with.span.end))
            });
        } else if with.span.end == field.span.start {
            return Err(ParseError::User {
                error: ("Space required between `with` token and enum field", Span::new(with.span.start, field.span.end))
            });
        }
        let proj_res = util::flatten_projection(&evar.value);
        if proj_res.is_err() {
            return Err(ParseError::User {
                error: (proj_res.err().unwrap(), evar.span)
            });
        }
        let proj = proj_res.unwrap();
        if proj.len() != 2 {
            return Err(ParseError::User {
                error: ("Only enum variants can have `with` fields, and variants are of the form <Id>.<Id>", evar.span)
            });
        }
        let (enum_id, variant) = match (&proj[0], &proj[1]) {
            (ast::Expression::Identifier(eid, _), ast::Expression::Identifier(var, _)) => (eid.clone(), var.clone()),
            _ => {
                return Err(ParseError::User {
                    error: ("Only enum variants can have `with` fields, not arbitrary projected expressions", evar.span)
                })
            }
        };

        Ok(ast::Expression::EnumVariant {
            enum_id,
            variant,
            field: Box::new(field.clone().value),
            span: Some(Span::new(evar.span.start, field.span.end)),
        })
    },
    // Function application: collect args instead of currying here, but can still support
    // currying and partial application during execution
    <func: Sp<AtomicExpr>> <args: Sp<AtomicExpr>+> =>? {
        let app_span = Span::new(func.span.start, args.last().unwrap().span.end);
        let mut spans = vec![func.span];
        spans.extend(args.iter().map(|a| a.span.clone()).collect::<Vec<_>>());
        let spans_overlap_res = util::spans_overlap(&spans);
        if spans_overlap_res.is_err() {
            Err(ParseError::User {
                error: ("Function or arguments overlap in span", spans_overlap_res.err().unwrap())
            })
        } else {
            Ok(ast::Expression::FuncApplication(
                Box::new(func.value),
                args.into_iter().map(|a| a.value).collect(),
                Some(app_span)
            ))
        }
    },
    // Function application with named arguments
    <func: Sp<AtomicExpr>> <args: SpNamedFuncArg+> =>? {
        let app_span = Span::new(func.span.start, args.last().unwrap().2.end);
        let mut spans = vec![func.span];
        spans.extend(args.iter().map(|a| a.2.clone()).collect::<Vec<_>>());
        let spans_overlap_res = util::spans_overlap(&spans);
        if spans_overlap_res.is_err() {
            Err(ParseError::User {
                error: ("Function or arguments overlap in span", spans_overlap_res.err().unwrap())
            })
        } else {
            Ok(ast::Expression::NamedArgsFuncApp(
                Box::new(func.value),
                args.into_iter().map(|(id, e, s)| (id, e, Some(s))).collect(),
                Some(app_span),
            ))
        }
    }

//     // BuiltinOp
//     <op1: AtomicExpr> <bop: BuiltinOp> <op2: AtomicExpr> => ast::Expression::FuncApplication(
//         Box::new(ast::Expression::FuncApplication(
//             Box::new(ast::Expression::BuiltinOp(bop)),
//             Box::new(op1)
//         )),
//         Box::new(op2)
//     ),
//     <match_: Sp<"match">> <matchand: Sp<Expression>> "{" <arm: (<Pattern> "=>" <Expression> ","?)> "}" =>? {
//         if match_.end == matchand.start {
//             Err(ParseError::User {
//                 error: "Space required between `match` keyword and matchand"
//             })
//         } else {
//             Ok(ast::Expression::MatchConstruct(
//                 Box::new(matchand.value), vec![arm]
//             ))
//         }
//     },
//     <match_: Sp<"match">> <matchand: Sp<Expression>> "{" <arms: SepTupleAtLeastTwo<(<Pattern> "=>" <Expression>), ",">> "}" =>? {
//         if match_.end == matchand.start {
//             Err(ParseError::User {
//                 error: "Space required between `match` keyword and matchand"
//             })
//         } else {
//             Ok(ast::Expression::MatchConstruct(
//                 Box::new(matchand.value), arms
//             ))
//         }
//     },
}

// TODO: what if we got rid of let-in? Every let was just a let-in?
// We introduce variables non-polymorphically through lambdas, eh?
InExpr: ast::Expression = "in" <e: Expression> => e;

// TODO: parse types for typed let expr
LetExpr: ast::Expression = {
    <start: @L> "let" <rec: "rec"?> <var: Sp<Identifier>> <args: Sp<Identifier>*> "=" <e: NonLetExpr> <in_expr: InExpr?> <end: @R>  => {
        ast::Expression::Let(
            ast::VarWithValue {
                name: (var.value, Some(var.span)),
                args: args.into_iter().map(|a| (a.value, Some(a.span))).collect::<Vec<_>>(),
                rec: rec.is_some(),
                expr: Box::new(e),
            },
            if let Some(_) = in_expr {
                Some(Box::new(in_expr.unwrap()))
            } else {
                None
            },
            Some(Span { start, end, }),
        )
    },
}

Expression: ast::Expression = {
    NonLetExpr,
    LetExpr,
}

// ****************************************
// Enum declarations
// ****************************************

SpEnumVariant: (String, Option<types::Type>, Span) = {
    <vid: Sp<Identifier>> => (vid.value, None, vid.span),
    <vid: Sp<Identifier>> <with: Sp<"with">> <field_t: Sp<Type>> =>? {
        if vid.span.end == with.span.start {
            Err(ParseError::User {
                error: ("Type of variant with argument requires space between TypeId and `with` token", Span::new(vid.span.start, with.span.end))
            })
        } else if with.span.end == field_t.span.start {
            Err(ParseError::User {
                error: ("Type of variant with argument requires space between `with` token and field type", Span::new(with.span.start, field_t.span.end))
            })
        } else {
            Ok((vid.value, Some(field_t.value), Span::new(vid.span.start, field_t.span.end)))
        }
    }
}

EnumDecl: ast::Statement = {
    <start: @L> <enum_: "enum"> <p: PolytypeVar*> <eid: Sp<Identifier>> "=" <variants: SepSeqAtLeastOne<SpEnumVariant, "|">> <end: @R> => {
        ast::Statement::EnumDecl {
            name: (eid.value, Some(eid.span)),
            type_args: p,
            variants: variants.into_iter().map(|(name, typ, span)| (name, typ, Some(span))).collect::<Vec<_>>(),
            span: Some(Span { start, end })
        }
    }
}

// ****************************************
// Wye Program
// ****************************************

pub(crate) Statement: ast::Statement = {
    <e: Expression> => ast::Statement::Expression(e),
    EnumDecl,
}

pub Program: ast::Program = {
    <s: (Statement ";")+> => s.into_iter().map(|(stmt, _)| stmt).collect::<Vec<_>>(),
}

// ****************************************
// Types
// ****************************************

RecordTypeMethod: (String, types::Type, util::RecordMemberness) = 
    "method" <m: Identifier> ":" <t: Type> => (m, t, util::RecordMemberness::Method);

RecordTypeMember: (String, types::Type, util::RecordMemberness) = {
    <r: RecordField<Type>> => (r.0, r.1, util::RecordMemberness::Value),
    RecordTypeMethod,
}

SpRecordTypeMember: Spanned<(String, types::Type, util::RecordMemberness)> = 
    Sp<RecordTypeMember>;

// The parser can build a list of declared types
AtomicType: types::Type = {
    "none" => types::Type::None,
    "int" => types::Type::Int,
    "float" => types::Type::Float,
    "string" => types::Type::String,
    <tid: Identifier> => types::Type::TypeId(tid, vec![]),
    "[" <t: Type> "]" => types::Type::List(Box::new(t)),
    <tup: WyeTuple<Type>> => types::Type::Tuple(tup),
    <p: PolytypeVar> => types::Type::Poly(p.name, p.bound),
    // Structural record
    <r: WyeRecord<SpRecordTypeMember>> =>? {
        let mut methods = BTreeMap::<String, types::Type>::new();
        let mut values = BTreeMap::<String, types::Type>::new();

        for mem in r {
            let (name, typ, memberness) = mem.value;
            match memberness {
                util::RecordMemberness::Method => {
                    if methods.contains_key(&name) {
                        return Err(ParseError::User {
                            error: ("Duplicate method in struct", mem.span)
                        });
                    }
                    methods.insert(name, typ);
                }
                util::RecordMemberness::Value => {
                    if values.contains_key(&name) {
                        return Err(ParseError::User {
                            error: ("Duplicate value in struct", mem.span)
                        });
                    }
                    values.insert(name, typ);   
                }
            }
        }

        Ok(types::Type::Record(Structure { methods, values, flex: Flex::Permissive }))
    },
    // Nominal record
    <r: NomRecord<SpRecordTypeMember>> =>? {
        let mut methods = BTreeMap::<String, types::Type>::new();
        let mut values = BTreeMap::<String, types::Type>::new();

        for mem in r {
            let (name, typ, memberness) = mem.value;
            match memberness {
                util::RecordMemberness::Method => {
                    if methods.contains_key(&name) {
                        return Err(ParseError::User {
                            error: ("Duplicate method in nominal", mem.span)
                        });
                    }
                    methods.insert(name, typ);
                }
                util::RecordMemberness::Value => {
                    if values.contains_key(&name) {
                        return Err(ParseError::User {
                            error: ("Duplicate value in nominal", mem.span)
                        });
                    }
                    values.insert(name, typ);   
                }
            }
        }

        Ok(types::Type::Record(Structure { methods, values, flex: Flex::Exact }))
    },
    "(" <t: Type> ")" => t,
}

NonFuncType: types::Type = {
    AtomicType,
    <tparams: AtomicType+> <tid: Identifier> => types::Type::TypeId(tid, tparams),
}

pub(crate) Type: types::Type = {
    NonFuncType,
    <ftypes: SepSeqAtLeastTwo<NonFuncType, "->" /*"*/>> =>? {
        let func_type_res = types::collect_functype(&ftypes[..]);
        if func_type_res.is_err() {
            // TODO: this span should be better
            return Err(ParseError::User {
                error: (func_type_res.err().unwrap(), Span::new(0, 0))
            });
        }
        Ok(func_type_res.unwrap())
    },
}

// pub Expression: Spanned<ast::Expression> = {
//     AtomicExpr,
//     <tid: Sp<Identifier>> <with: Sp<"with">> <field: Sp<AtomicExpr>> =>? {
//         if tid.end == with.start {
//             Err(ParseError::User {
//                 error: "Variant with argument requires space between TypeId and `with` token"
//             })
//         } else if with.end == field.start {
//             Err(ParseError::User {
//                 error: "Variant with argument requires space between `with` token and field expression"
//             })
//         } else {
//             Ok(ast::Expression::TypeVariant(tid.value, Box::new(field.value)))
//         }
//     },
//     <func: Sp<AtomicExpr>> <args: Sp<AtomicExpr>+> =>? match util::collect_function::<ast::Expression>(
//         func,
//         args,
//         |e1, e2| ast::Expression::FuncApplication(Box::new(e1), Box::new(e2))
//     ) {
//         Ok(v) => Ok(v),
//         Err(e) => Err(ParseError::User { error: e })
//     },
//     // BuiltinOp
//     <op1: AtomicExpr> <bop: BuiltinOp> <op2: AtomicExpr> => ast::Expression::FuncApplication(
//         Box::new(ast::Expression::FuncApplication(
//             Box::new(ast::Expression::BuiltinOp(bop)),
//             Box::new(op1)
//         )),
//         Box::new(op2)
//     ),
//     <match_: Sp<"match">> <matchand: Sp<Expression>> "{" <arm: (<Pattern> "=>" <Expression> ","?)> "}" =>? {
//         if match_.end == matchand.start {
//             Err(ParseError::User {
//                 error: "Space required between `match` keyword and matchand"
//             })
//         } else {
//             Ok(ast::Expression::MatchConstruct(
//                 Box::new(matchand.value), vec![arm]
//             ))
//         }
//     },
//     <match_: Sp<"match">> <matchand: Sp<Expression>> "{" <arms: SepTupleAtLeastTwo<(<Pattern> "=>" <Expression>), ",">> "}" =>? {
//         if match_.end == matchand.start {
//             Err(ParseError::User {
//                 error: "Space required between `match` keyword and matchand"
//             })
//         } else {
//             Ok(ast::Expression::MatchConstruct(
//                 Box::new(matchand.value), arms
//             ))
//         }
//     },
//     r"\\" <ids: Identifier+> "->" <body: Expression> => ast::Expression::Lambda(ids, Box::new(body)),
//     "{" <stmts: LetStatement*> <e: Expression> "}" => {
//         ast::Expression::Block(stmts, Box::new(e))
//     }
// }

// AtomicPattern: ast::Pattern = {
//     "_" => ast::Pattern::Wildcard,
//     <i: IntegerLiteral> => ast::Pattern::IntegerLiteral(i),
//     <f: FloatLiteral> => ast::Pattern::FloatLiteral(f),
//     <s: StringLiteral> => ast::Pattern::StringLiteral(s),
//     <id: Identifier> => ast::Pattern::Identifier(id),
//     <tid: Sp<Identifier>> <with: Sp<"with">> <field: Sp<CompoundPattern>> =>? {
//         if tid.end == with.start {
//             Err(ParseError::User {
//                 error: "Variant with argument requires space between TypeId and `with` token"
//             })
//         } else if with.end == field.start {
//             Err(ParseError::User {
//                 error: "Variant with argument requires space between `with` token and field identifier"
//             })
//         } else {
//             Ok(ast::Pattern::TypeVariant(tid.value, Box::new(field.value)))
//         }
//     },
//     "[" "]" => ast::Pattern::EmptyList,
//     "(" <AtomicPattern> ")" => <>,
// }

// ScopablePattern: ast::Pattern = {
//     AtomicPattern,
//     <head: Identifier> "::" <tail: Identifier> => ast::Pattern::ListConstruction(head, tail),
// }

// CompoundPattern: ast::Pattern = {
//     ScopablePattern,
//     "[" <pats: SepSeqAtLeastOne<ScopablePattern, ",">> "]" => ast::Pattern::List(pats),
//     "(" <pats: SepTuple<ScopablePattern, ",">> ")" => ast::Pattern::Tuple(pats),
// }

// UnguardedPattern: ast::Pattern = {
//     CompoundPattern,
//     <pats: SepSeqAtLeastTwo<AtomicPattern, "|">> => ast::Pattern::Union(pats),
//     "~" <pat: CompoundPattern> => ast::Pattern::Complement(Box::new(pat)),
// }

// pub Pattern: ast::Pattern = {
//     UnguardedPattern,
//     <pat: Sp<UnguardedPattern>> <if_: Sp<"if">> <guard: Sp<Expression>> =>? {
//         if pat.end == if_.start {
//             Err(ParseError::User {
//                 error: "Space required between pattern to guard and `if` token"
//             })
//         } else if if_.end == guard.start {
//             Err(ParseError::User {
//                 error: "Space required between `if` token and guard expression"
//             })
//         } else {
//             Ok(ast::Pattern::Guarded(Box::new(pat.value), guard.value))
//         }
//     },
// }

// // Program

// TypeVariantDeclType: (String, Option<types::TypeExpression>) = {
//     <tid: Identifier> => (tid, None),
//     <tid: Sp<Identifier>> <with: Sp<"with">> <field_t: Sp<TypeExpression>> =>? {
//         if tid.end == with.start {
//             Err(ParseError::User {
//                 error: "Type of variant with argument requires space between TypeId and `with` token"
//             })
//         } else if with.end == field_t.start {
//             Err(ParseError::User {
//                 error: "Type of variant with argument requires space between `with` token and field type"
//             })
//         } else {
//             Ok((tid.value, Some(field_t.value)))
//         }
//     }
// }

// LetStatement: ast::Statement = {
//     <let_: Sp<"let">> <ids: Sp<Identifier>+> "=" <e: Expression> ";" =>? {
//         if let_.end == ids[0].start {
//             Err(ParseError::User {
//                 error: "Space required between `let` token and first identifier in let statement"
//             })
//         } else if util::spans_overlap(&ids.iter().map(|x| (x.start, x.end)).collect::<Vec<_>>()) {
//             Err(ParseError::User {
//                 error: "Identifiers in untyped let require space between them"
//             })
//         } else {
//             Ok(ast::Statement::UntypedLet(
//                 ids.iter().map(|x| x.value.clone()).collect::<Vec<_>>(), e
//             ))
//         }
//     },
//     <let_: Sp<"let">> <typed_id: Sp<TypedIdentifier>> "=" <e: Expression> ";" =>? {
//         if let_.end == typed_id.start {
//             Err(ParseError::User {
//                 error: "Space required between `let` token and first identifier in let statement"
//             })
//         } else {
//             Ok(ast::Statement::TypedLet(typed_id.value.0, typed_id.value.1, vec![], e))
//         }
//     },
//     <let_: Sp<"let">> <id: Sp<Identifier>> <typed_ids: ("(" <TypedIdentifier> ")" "->")+> <te: TypeExpression> "=" <e: Expression> ";" =>? {
//         if let_.end == id.start {
//             Err(ParseError::User {
//                 error: "Space required between `let` token and first identifier"
//             })
//         } else {
//             Ok(ast::Statement::TypedLet(id.value, te, typed_ids, e)   )
//         }
//     }
// }

// pub Statement: ast::Statement = {
//     LetStatement,
//     <type_: Sp<"type">> <tid: Sp<Identifier>> <tvars: Sp<TypeVar>*> "=" <variants: SepSeqAtLeastOne<TypeVariantDeclType, "|">> ";" =>? {
//         if type_.end == tid.start {
//             Err(ParseError::User {
//                 error: "Space required between `type` token and declared type name"
//             })
//         } else if tvars.len() != 0 && tid.end == tvars[0].start {
//             Err(ParseError::User {
//                 error: "Space required between declared type name and type arguments"
//             })
//         } else if util::spans_overlap(&tvars.iter().map(|tv| (tv.start, tv.end)).collect::<Vec<_>>()) {
//             Err(ParseError::User {
//                 error: "Type variables in type declaration require space between them"
//             })
//         } else {
//             Ok(ast::Statement::TypeDeclaration(
//                 tid.value,
//                 tvars.iter().map(|tv| tv.value.clone()).collect::<Vec<_>>(),
//                 variants
//             ))
//         }
//     }
// }

// pub Program: Vec<ast::Statement> = <stmts: Sp<Statement>+> =>? {
//     if util::spans_overlap(&stmts.iter().map(|s| (s.start, s.end)).collect::<Vec<_>>()) {
//         Err(ParseError::User {
//             error: "Space required between adjacent statements"
//         })
//     } else {
//         Ok(stmts.iter().map(|s| s.value.clone()).collect::<Vec<_>>())
//     }
// };

// ****************************************
// Utility macros
// ****************************************

/// Match `Rule` and extract the match's span.
Sp<Rule>: Spanned<Rule> =
    <start: @L> <value: Rule> <end: @R> => Spanned { value, span: Span { start, end }};

/// A sequence of `T` nodes separated by `Sep` tokens, with at least one element.
/// Used for matching lists.
SepSeqAtLeastOne<T, Sep>: Vec<T> = {
    <mut v: (<T> Sep)*> <suffix: T> => {
        v.push(suffix);
        v
    }
}

/// A sequence of `T` nodes separated by `Sep` tokens, with at least two elements.
/// Used for matching function types and union patterns.
SepSeqAtLeastTwo<T, Sep>: Vec<T> = {
    <mut v: (<T> Sep)+> <suffix: T> => {
        v.push(suffix);
        v
    }
}

/// Having this rule makes it easier to extract the spanning positions of list
/// elements enclosed within square brackets.
NonemptyList<T>: Vec<T> =
    "[" <lst: SepSeqAtLeastOne<T, ",">> "]" => lst;

/// A sequence of `T` nodes separated by `Sep` tokens with at least one `T` `Sep`
/// and potentially ending with `Sep`.
SepTuple<T, Sep>: Vec<T> = {
    <mut v: (<T> Sep)+> <suffix: T?> => match suffix {
        None => v,
        Some(val) => {
            v.push(val);
            v
        }
    }
}

SepSeqOptSuffix<T, Sep>: Vec<T> = {
    <t: T> Sep? => vec![t],
    // This is just SepTupleAtLeastTwo
    // but putting that here tries to reduce to it
    <prefix: T> <mut v: (Sep <T>)+> Sep? => {
        let mut out = vec![prefix];
        out.append(&mut v);
        out
    },
}

/// Used to match a Wye tuple, as notated within `(` `)` and separated with commas.
/// Distinct from the SepTuple rule above, which is used to match arbitrary sequences
/// that appear in tuple-style separation notation.
WyeTuple<T>: Vec<T> =
    "(" <t: SepTuple<T, ",">> ")" => t;

/// A sequence of `T` nodes separated by `Sep` tokens. Used for tuples.
SepTupleAtLeastTwo<T, Sep>: Vec<T> = {
    <prefix: T> <mut v: (Sep <T>)+> Sep? => {
        let mut out = vec![prefix];
        out.append(&mut v);
        out
    }
}

RecordField<T>: (String, T) = 
    <i: Identifier> ":" <t: T> => (i, t);

WyeRecord<MemberType>: Vec<MemberType> =
    "{" <n: SepSeqOptSuffix<MemberType, ",">> "}" => n;

NomRecord<MemberType>: Vec<MemberType> =
    "{|" <n: SepSeqOptSuffix<MemberType, ",">> "|}" => n;


/// An identifier with a type annotation.
// TypedIdentifier: (String, types::Type) =
//     <id: Identifier> ":" <te: TypeExpression> => (id, te);
