(* Generate the Collatz sequence starting at an input x *)

struct CollatzSeq
    len: int
    sequence: [int]
end

struct Sequence {
    len: int,
    _sequence: [int],
}

# This is janky
main
    let mod (a: int) -> (b: int) -> int = a - ((a // b) * b),
    let collatz_sequence (x: int) -> [int] =
    match x
        case x < 1 => []
        1 => [1]
        case (mod x 2) == 0 => x :: (collatz_sequence (x // 2))
        _ => x :: (collatz_sequence ((3 * x) + 1))
    end,
    let seq = print (collatz_sequence 97)
end

match bruh:
    case x:
        do something
    case y:
        do something

# Go back to the semicolons and commas and braces?
main {
    let mod (a: int) -> (b: int) -> int = a - ((a // b) * b) in
    let collatz_sequence (x: int) -> [int] = match x {
        case x < 1 => [],
        1 => [1],
        case (mod x 2) == 0 =>
            x :: (collatz_sequence (x // 2)),
        _ => x :: (collatz_sequence ((3 * x) + 1)),
    };
}